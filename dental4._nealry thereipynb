{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyOAg4lny4FqB2A9VTjDFZx6",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/aishalihwaidi/Assignment-2-Software-Implementation-/blob/main/dental4._nealry%20thereipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from enum import Enum\n",
        "\n",
        "# Define a DentalCompany class\n",
        "class DentalCompany:\n",
        "    # Initialize the class with a name, owner, and establishment year as attributes \n",
        "    def __init__(self, name,owner,establishmentYear):\n",
        "        self._name = name\n",
        "        self._owner = owner\n",
        "        self._establishmentYear = establishmentYear\n",
        "     # The branches  is initialized as an empty list to store all the branches of the dentalcompany        \n",
        "        self._branches = []\n",
        "\n",
        "   # Setters and getters for the name, owner, and establishment year attributes\n",
        "    def set_name(self, name):\n",
        "        self._name = name    \n",
        "    def get_name(self):\n",
        "        return self._name\n",
        "    \n",
        "    def set_owner(self, owner):\n",
        "        self._owner = owner\n",
        "    def get_owner(self):\n",
        "        return self._owner\n",
        "    \n",
        "    def set_establishment_year(self, establishmentYear):\n",
        "        self._establishmentYear = establishmentYear\n",
        "    def get_establishment_year(self):\n",
        "        return self._establishmentYear    \n",
        "\n",
        "    #method that appends the branch to the empty list \n",
        "    def add_branch(self, branch):\n",
        "        self._branches.append(branch)\n",
        "    #method that returns the ist of branches for the dentalcompany     \n",
        "    def get_branch(self):\n",
        "        return self._branches\n",
        "\n",
        "# Define a Branch class\n",
        "class Branch:\n",
        "    # Initialize the class with a name, city, and contactNumber as attributes \n",
        "    def __init__(self, branchName, city, contactNumber):\n",
        "        self._branchName = branchName\n",
        "        self._city = city\n",
        "        self._contactNumber = contactNumber\n",
        "     # The staff, patients and services  are initialized as  empty lists to store all the staff, partients and services of the branch        \n",
        "        self._staff = []\n",
        "        self._patients = []\n",
        "        self._services = []\n",
        "\n",
        "  # Setters and getters for the name, city, and contact number attributes\n",
        "    def set_branchName(self, branchName):\n",
        "        self._branchName = branchName\n",
        "    def get_branchName(self):\n",
        "        return self._branchName\n",
        "    def set_city(self, city):\n",
        "        self._city = city\n",
        "    def get_city(self):\n",
        "        return self._city\n",
        "    def set_contact_number(self, contactNumber):\n",
        "        self._contactNumber = contactNumber\n",
        "    def get_contact_number(self):\n",
        "        return self._contactNumber  \n",
        "\n",
        "    #method that appends the staff to the empty list\n",
        "    def add_staff(self, Staff):\n",
        "        self._staff.append(Staff)\n",
        "    #method that returns the list of staff for the branch         \n",
        "    def get_staff(self):\n",
        "        return self._staff\n",
        "    #method that appends the patients to the empty list\n",
        "    def add_patient(self, Patient):\n",
        "        self._patients.append(Patient)\n",
        "    #method that returns the list of patients for the branch     \n",
        "    def get_patient(self):\n",
        "        return self._patients\n",
        " #method that appends the services to the empty list\n",
        "    def add_service(self, Service):\n",
        "        self._services.append(Service)\n",
        "   #method that returns the list of services for the branch     \n",
        "    def get_service(self):\n",
        "        return self._services\n",
        "\n",
        "# Define a Service class\n",
        "class Service:\n",
        "    # Initialize the class with a name, descrpition, and price as attributes  \n",
        "    def __init__(self, name, description, price):\n",
        "        self._name = name\n",
        "        self._description = description\n",
        "        self._price = price\n",
        "\n",
        " # Setters and getters for the name, description, and price attributes\n",
        "    def set_name(self, name):\n",
        "        self._name = name\n",
        "    def get_name(self):\n",
        "        return self._name\n",
        "    def set_description(self, description):\n",
        "        self._description = description\n",
        "    def get_description(self):\n",
        "        return self._description\n",
        "    def set_price(self, price):\n",
        "        self._price = price\n",
        "    def get_price(self):\n",
        "        return self._price\n",
        "\n",
        "# Define a Gender class for enumeration with two values: male and female\n",
        "class Gender(Enum):\n",
        "  male = \"male\"\n",
        "  female = \"female\"\n",
        "\n",
        "# Define a Person class this is a parent class \n",
        "class Person:\n",
        "    # Initialize the class with a firstName, lastName, gender, dateOfBirth as attributes   \n",
        "    def __init__(self, firstName, lastName, gender, dateOfBirth):\n",
        "        self._firstName = firstName\n",
        "        self._lastName = lastName\n",
        "        self._gender = gender\n",
        "        self._dateOfBirth = dateOfBirth\n",
        "\n",
        " # Setters and getters for the firstName, lastName, gender, dateOfBirth attributes    \n",
        "    def set_firstName(self, firstName):\n",
        "        self._firstName = firstName\n",
        "    def get_firstName(self):\n",
        "        return self._firstName\n",
        "    \n",
        "    def set_lastName(self, lastName):\n",
        "        self._lastName = lastName\n",
        "    def get_lastName(self):\n",
        "        return self._lastName\n",
        "    \n",
        "    def set_gender(self, gender):\n",
        "        self._gender = gender     \n",
        "    def get_gender(self):\n",
        "        return self._gender\n",
        "    \n",
        "    def set_dateOfBirth(self, dateOfBirth):\n",
        "        self._dateOfBirth = dateOfBirth   \n",
        "    def get_dateOfBirth(self):\n",
        "        return self._dateOfBirth\n",
        "    \n",
        "# Define a Insurance Status class for enumeration with two values: insured and not insured\n",
        "class InsuranceStatus(Enum):\n",
        "    insured = 'insured'\n",
        "    not_insured = 'not insured'\n",
        "\n",
        "# Define a class for a Patient, that is the child class of Person\n",
        "class Patient(Person):\n",
        "    # Initialize the class with a firstName, lastName, gender, dateOfBirth which are inherited as attributes \n",
        "    #and phoneNumber, insuranceStatus which are the additional  attributes    \n",
        "    def __init__(self, firstName, lastName, gender, dateOfBirth, phoneNumber, insuranceStatus):\n",
        "       #Use the super function to inherit the attributes of Person class\n",
        "        super().__init__(firstName, lastName, gender, dateOfBirth)\n",
        "        #Initialize the additional attributes \n",
        "        self._phoneNumber = phoneNumber\n",
        "        self._insuranceStatus = insuranceStatus\n",
        "        self._appointments = []\n",
        "\n",
        "    # Define methods for setting and getting the phone number  and insureance status attribute\n",
        "    def set_phoneNumber(self, phoneNumber):\n",
        "        self._phoneNumber = phoneNumber \n",
        "    def get_phoneNumber(self):\n",
        "        return self._phoneNumber\n",
        "    def set_insuranceStatus(self, insuranceStatus):\n",
        "        self._insuranceStatus = insuranceStatus\n",
        "    def get_insuranceStatus(self):\n",
        "        return self._insuranceStatus  \n",
        "    \n",
        "    #method that appends the appointments of the patients to the empty list \n",
        "    def add_appointment(self, appointment):\n",
        "        self._appointments.append(appointment)\n",
        "        #method that returns the list of appointments for the patients  \n",
        "    def get_appointment(self):\n",
        "        return self._appointments\n",
        "      \n",
        "\n",
        "# Define a Role class for enumeration with values: manager,Receptionist, Hygienist and  Dentist\n",
        "class Role(Enum):\n",
        "    MANAGER = \"Manager\"\n",
        "    RECEPTIONIST = \"Receptionist\"\n",
        "    HYGIENIST = \"Hygienist\"\n",
        "    DENTIST = \"Dentist\"\n",
        "\n",
        "class Staff(Person):\n",
        "     # Initialize the class with a firstName, lastName, gender, dateOfBirth which are inherited as attributes \n",
        "    #and employee ID, role which are the additional  attributes \n",
        "  def __init__(self, firstName, lastName, gender, dateOfBirth, employeeID, role):\n",
        "    super().__init__(firstName, lastName, gender, dateOfBirth)\n",
        "    self._employeeID = employeeID\n",
        "    self._role = role\n",
        "\n",
        "  # Define methods for setting and getting the employee ID  and role attribute\n",
        "  def set_employeeID(self, employeeID):\n",
        "    self._employeeID = employeeID    \n",
        "  def get_employeeID(self):\n",
        "    return self._employeeID\n",
        "  def set_role(self, role):\n",
        "    self._role = role    \n",
        "  def get_role(self):\n",
        "    return self._role\n",
        "\n",
        "# Define a Status class for enumeration with values: confirmed,cancelled, and completed \n",
        "class Status(Enum):\n",
        "  confirmed = \"confirmed\"\n",
        "  cancelled = \"cancelled\"\n",
        "  completed = \"completed\"\n",
        "\n",
        "# Define a class for a Appointment\n",
        "class Appointment:\n",
        "  # Initialize the class with a date, time, patients, staff, services, status as attributes \n",
        "  def __init__(self, date, time, patients, staff, services, status):\n",
        "    self._date = date\n",
        "    self._time = time\n",
        "\n",
        "    self._patients = patients\n",
        "    self._staff = staff\n",
        "    self._services = services\n",
        "\n",
        "    self._status = status\n",
        "\n",
        "  def service_info(self):\n",
        "    return self._services\n",
        "  def patients_info(self):\n",
        "    return self._patients\n",
        "  def staff_info(self):\n",
        "    return self._staff\n",
        "\n",
        "  # Define methods for setting and getting the date, time and status attribute\n",
        "  def set_date(self, date):\n",
        "    self._date = date\n",
        "  def get_date(self):\n",
        "    return self._date\n",
        "  def set_time(self, time):\n",
        "    self._time = time\n",
        "  def get_time(self):\n",
        "    return self._time\n",
        "  def set_status(self, status):\n",
        "    self._status = status\n",
        "  def get_status(self):\n",
        "    return self._status\n",
        "\n",
        "# Define a PaymentMethod class for enumeration with values: cash,credit_card, debit_card, insurance and  installment\n",
        "class PaymentMethod(Enum):\n",
        "  cash = \"cash\"\n",
        "  credit_card = \"credit_card\"\n",
        "  debit_card = \"debit_card\"\n",
        "  insurance = \"insurance\"\n",
        "  installment = \"installment\"\n",
        "\n",
        "# Define a class for a Bill\n",
        "class Bill:\n",
        "  # Initialize the class with patients, appointments, services, discounts, paymentMethod as attributes   \n",
        "  def __init__(self, branch, appointments, discounts, paymentMethod):\n",
        "\n",
        "    self._branch = branch\n",
        "    self._appointments = appointments\n",
        "    self._discounts = discounts\n",
        "    self._paymentMethod = paymentMethod\n",
        "\n",
        "  # Define methods for setting and getting the payment method and discounts\n",
        "  def set_discounts(self, discounts):\n",
        "    self._discounts = discounts\n",
        "  def get_discounts(self):\n",
        "    return self._discounts\n",
        "  def set_paymentMethod(self, paymentMethod):\n",
        "    self._paymentMethod = paymentMethod\n",
        "  def get_paymentMethod(self):\n",
        "    return self._paymentMethod\n",
        "  \n",
        "\n",
        "  # Define a method to display a bill for completed appointments   \n",
        "  def display_bill(self):\n",
        "      # Loop through each appointment in the list of appointments\n",
        "      for appointment in self._appointments:\n",
        "          # Check if the status of the appointment is \"completed\"\n",
        "          if appointment.get_status() == Status.completed:\n",
        "\n",
        "              # Get the patient and staff information from the appointment class\n",
        "              patient = appointment.patients_info()\n",
        "              staffs = appointment.staff_info()\n",
        "              branchname = self._branch[0].get_branchName()\n",
        "\n",
        "              # Calculate the total cost of all services in the appointment\n",
        "              total_cost = sum([service.get_price() for service in appointment.service_info()])\n",
        "              # Calculate the amount of discount based on the discount rate and total cost\n",
        "              discount_amount = self._discounts * total_cost\n",
        "              # Calculate the subtotal after applying the discount\n",
        "              subtotal = total_cost - discount_amount\n",
        "              # Calculate the VAT amount on the subtotal\n",
        "              vat = subtotal * 0.05\n",
        "              # Calculate the final price including VAT\n",
        "              final_price = subtotal + vat\n",
        "              \n",
        "              # Display the bill title\n",
        "              print(\"---------- Bill ----------\")\n",
        "              print(\"Thank you for trusting\", branchname)\n",
        "\n",
        "              # Display the patient's name\n",
        "              print(\"Patient's Name:\", patient.get_firstName(), patient.get_lastName())\n",
        "              # Display the patient's insurance status\n",
        "              print(\"This patient is\", patient.get_insuranceStatus().name)\n",
        "\n",
        "              #Display doctors name \n",
        "              print(\"This patient was treated by:\", staffs.get_firstName(), staffs.get_lastName() )\n",
        "              \n",
        "              # Display the total cost of the appointment              \n",
        "              print(f\"Total Cost: AED{total_cost}\")\n",
        "              # Display the appointment date\n",
        "              print(f\"Date: {appointment.get_date()}\")\n",
        "              # Display the appointment time\n",
        "              print(f\"Time: {appointment.get_time()}\")\n",
        "              \n",
        "              # Display the list of services in the appointment\n",
        "              print(\"Services:\")\n",
        "              for service in appointment.service_info(): \n",
        "                  #Display the name and price of each service\n",
        "                  print(f\"- {service.get_name()}: AED{service.get_price()}\")\n",
        "              # Display the discount amount applied\n",
        "              print(f\"Discount ({self._discounts * 100}%): AED{discount_amount}\")\n",
        "              # Display the subtotal after applying the discount\n",
        "              print(f\"Subtotal: AED{subtotal}\")\n",
        "              # Display the VAT amount\n",
        "              print(f\"VAT (5%): AED{vat}\")\n",
        "              # Display the final price including VAT\n",
        "              print(f\"Final Price (including VAT): AED{final_price}\") \n",
        "              # Display the payment method used\n",
        "              print(f\"Payment method: {self._paymentMethod.value}\") \n",
        "          \n",
        "          # If the status of the appointment is not \"completed\", display an error message     \n",
        "          else:\n",
        "              print(\"Appointment status is not completed, bill cannot be displayed\")\n",
        "\n",
        "  \n",
        "     \n",
        "\n",
        "  #####try printing the lists to show that they were stored \n",
        "\n",
        "  "
      ],
      "metadata": {
        "id": "EH9hwvw8675e"
      },
      "execution_count": 65,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FV6lvoeT67R8",
        "outputId": "b6d782a5-9347-47d4-d80e-e25080bdff9f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "---------- Bill ----------\n",
            "Thank you for trusting Dubai Main Branch\n",
            "Patient's Name: Saif Al Shamsi\n",
            "This patient is insured\n",
            "This patient was treated by: Marwan Al Khayal\n",
            "Total Cost: AED351.4\n",
            "Date: 2023-07-22\n",
            "Time: 15:30\n",
            "Services:\n",
            "- Cleaning: AED100.5\n",
            "- Braces: AED250.9\n",
            "Discount (5.0%): AED17.57\n",
            "Subtotal: AED333.83\n",
            "VAT (5%): AED16.6915\n",
            "Final Price (including VAT): AED350.5215\n",
            "Payment method: cash\n"
          ]
        }
      ],
      "source": [
        "#Create a object for the class dental company\n",
        "dental_company = DentalCompany(\"Smiles For Life\",\"Aisha Lihwaidi\",2003)\n",
        "\n",
        "#Create a an object for the class branch and add it to the dental company\n",
        "branch1 = Branch(\"Dubai Main Branch\", \"Dubai\", \"0501234567\")\n",
        "dental_company.add_branch(branch1)\n",
        "branch2 = Branch(\"Sharjah Main Branch\", \"Sharjah\", \"0501231895\")\n",
        "dental_company.add_branch(branch2)\n",
        "\n",
        "#Create object for services class\n",
        "servicel = Service(\"Cleaning\", 'teeth of patients get cleaned', 100.50)\n",
        "service2 = Service(\"Braces\",'patient gets braces put on', 250.90)\n",
        "service3 = Service(\"Filling\",'cavities of patients are filled', 125.50)\n",
        "service4 = Service(\"Consultation\",'patients gets a consultation on their teeth', 75.25)\n",
        "\n",
        "#Add services to the branch \n",
        "branch1.add_service(servicel)\n",
        "branch1.add_service(service2)\n",
        "branch1.add_service(service3)\n",
        "branch1.add_service(service4)\n",
        "\n",
        "branch2.add_service(servicel)\n",
        "branch2.add_service(service2)\n",
        "branch2.add_service(service3)\n",
        "branch2.add_service(service4)\n",
        "\n",
        "#Create objects for the class staff  \n",
        "hygienist = Staff(\"Futaim\", \"Al Suwaidi\", \"Female\", \"12-12-1970\",\"ED1234\",Role.HYGIENIST) \n",
        "dentist = Staff(\"Marwan\", \"Al Khayal\", \"Male\", \"12-06-1892\",\"ED1234\",Role.DENTIST)\n",
        "hygienist1 = Staff(\"Maryam\", \"Al Jallaf\", \"Female\", \"04-06-200\",\"SD12312\",Role.HYGIENIST) \n",
        "dentist1 = Staff(\"Ameer\", \"Karim\", \"Male\", \"10-10-2000\",\"SD6003\",Role.DENTIST)\n",
        "\n",
        "# Add staff members to the branch \n",
        "branch1.add_staff(hygienist)\n",
        "branch1.add_staff(dentist)\n",
        "branch2.add_staff(hygienist1)\n",
        "branch2.add_staff(dentist1)\n",
        "\n",
        "# Create an object for patient class\n",
        "patient1 = Patient(\"Saif\", \"Al Shamsi\", \"055445829\", Gender.male,\"22-07-1970\", InsuranceStatus.insured)\n",
        "patient2 = Patient(\"Mona\", \"Al Ameeri\", \"059299991\", Gender.female,\"26-12-1999\",InsuranceStatus.not_insured)\n",
        "\n",
        "# Add patients  to the branch \n",
        "branch1.add_patient(patient1)\n",
        "branch1.add_patient(patient2)\n",
        "\n",
        "\n",
        "# Create an object for appointment class\n",
        "appointment1 = Appointment(\"2023-07-22\", \"15:30\", patient1, dentist, [servicel,service2], Status.completed)\n",
        "# Create a bill for patient1 \n",
        "bill = Bill([branch1], [appointment1],0.05, PaymentMethod.cash)\n",
        "# Display the bill for patient 1\n",
        "bill.display_bill()\n",
        "\n",
        "\n",
        "\n",
        "#CHANGE TIME TO BE FROM TIME MODULE \n",
        "#go over the code small detils "
      ]
    }
  ]
}